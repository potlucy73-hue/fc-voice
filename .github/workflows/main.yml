name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          Set-ItemProperty -Path "HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server" -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path "HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp" -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path "HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp" -Name "SecurityLayer" -Value 0 -Force
          try { netsh advfirewall firewall delete rule name="RDP-Tailscale" } catch {}
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          Write-Host "RDP configured successfully"

      - name: Create RDP User with Secure Password
        shell: pwsh
        run: |
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              Write-Error "User creation failed"
              exit 1
          }
          Write-Host "RDP user created successfully"

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\\tailscale.msi"
          Write-Host "Downloading Tailscale..."
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Write-Host "Installing Tailscale..."
          Start-Process msiexec.exe -ArgumentList "/i","`"$installerPath`"","/quiet","/norestart" -Wait
          Start-Sleep -Seconds 10
          Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
          Write-Host "Tailscale installed"

      - name: Establish Tailscale Connection
        shell: pwsh
        run: |
          $tailscalePath = "$env:ProgramFiles\\Tailscale\\tailscale.exe"
          if (-not (Test-Path $tailscalePath)) {
              Write-Error "Tailscale not found"
              exit 1
          }
          Write-Host "Connecting to Tailscale..."
          & $tailscalePath up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID --accept-routes
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 15) {
              Start-Sleep -Seconds 3
              $tsIP = & $tailscalePath ip -4
              $retries++
              Write-Host "Waiting for IP (attempt $retries/15)"
          }
          if (-not $tsIP) {
              Write-Error "IP not assigned"
              exit 1
          }
          $tsIP = $tsIP.Trim()
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Connected: $tsIP"
      
      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          Write-Host "Verifying RDP on: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -InformationLevel Quiet
          if (-not $testResult) {
              Write-Error "RDP port test failed"
              exit 1
          }
          Write-Host "RDP is accessible"

      - name: Maintain Connection
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "=========================================="
          Write-Host "       RDP CONNECTION DETAILS"
          Write-Host "=========================================="
          Write-Host ""
          Write-Host "  Address:  $env:TAILSCALE_IP"
          Write-Host "  Username: RDP"
          Write-Host "  Password: $env:RDP_PASSWORD"
          Write-Host ""
          Write-Host "=========================================="
          Write-Host ""
          Write-Host "Connection active. Cancel workflow to stop."
          Write-Host ""
          $counter = 0
          while ($true) {
              $counter++
              $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              Write-Host "[$timestamp] Heartbeat #$counter"
              Start-Sleep -Seconds 300
          }
